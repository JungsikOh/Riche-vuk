#version 450
#extension GL_ARB_shading_language_include : enable
#extension GL_ARB_shader_draw_parameters : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_samplerless_texture_functions : require

#include "CommonData.glsl"

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) readonly uniform U_Camera
{
	mat4 view;
	mat4 projection;
    mat4 viewInverse;
    mat4 projInverse;
}u_Camera;

layout(set = 1, binding = 0) readonly buffer SSBO_Model
{
	Transform transform[];
}ssbo_Model;

layout(set = 2, binding = 0) buffer SSBO_DrawIndexedCommands {
    IndircetDrawIndexedCommand drawIndexedCommands[];
}ssbo_DrawIndexedCommands;

layout(set = 2, binding = 1) buffer readonly SSBO_BoundingBoxBuffer {
    AABB boundingBoxList[];
};

layout(set = 2, binding = 2) uniform FrustumPlanes {
    vec4 planes[6];  // View Frustum의 6개 평면
};

bool IsAABBInFrustum(AABB aabb, uint index) 
{
    vec4 newMinPos = ssbo_Model.transform[index].currentModel * aabb.minPos;
    vec4 newMaxPos = ssbo_Model.transform[index].currentModel * aabb.maxPos;
    
    for (int i = 0; i < 6; ++i) 
    {
        vec3 positiveVertex = newMinPos.xyz;

        // 양수 방향 꼭짓점 선택
        if (planes[i].x >= 0) positiveVertex.x = newMaxPos.x;
        if (planes[i].y >= 0) positiveVertex.y = newMaxPos.y;
        if (planes[i].z >= 0) positiveVertex.z = newMaxPos.z;

        // 평면과 꼭짓점 사이의 거리 계산
        float distance = dot(planes[i].xyz, positiveVertex) + planes[i].w;

        // AABB의 한 좌표라도 평면 안에 있는 경우
        if (distance < 0) 
        {
            return false;
        }
    }

    return true; // 프러스텀 밖
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    
    // 각 AABB를 Frustum에 대해 검사하고, 포함된 경우 Indirect Draw 명령을 설정
    if (IsAABBInFrustum(boundingBoxList[idx], idx)) 
    {
        ssbo_DrawIndexedCommands.drawIndexedCommands[idx].instanceCount = 1;
    }
    else 
    {
        ssbo_DrawIndexedCommands.drawIndexedCommands[idx].instanceCount = 0;
    }
}

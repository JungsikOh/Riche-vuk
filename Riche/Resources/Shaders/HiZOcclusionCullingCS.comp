#version 450
#extension GL_ARB_shading_language_include : enable
#extension GL_ARB_shader_draw_parameters : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "CommonData.glsl"

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) uniform sampler linearWrapSS;
layout(set = 0, binding = 1) uniform sampler linearClampSS;
layout(set = 0, binding = 2) uniform sampler linearBorderSS;
layout(set = 0, binding = 3) uniform sampler pointWrapSS;
layout(set = 0, binding = 4) uniform sampler pointClampSS;

layout(set = 1, binding = 0) readonly uniform U_Camera
{
	mat4 view;
	mat4 projection;
    mat4 viewInverse;
    mat4 projInverse;
}u_Camera;

layout(set = 2, binding = 0) readonly buffer SSBO_Model
{
	Transform transform[];
}ssbo_Model;

///////////////////////////////////
// ViewFrustumCulling_COMPUTE
///////////////////////////////////

layout(set = 3, binding = 0) buffer DrawIndexedCommands {
    IndircetDrawIndexedCommand drawIndexedCommands[];
};
layout(set = 3, binding = 1) buffer readonly BoundingBoxes {
    AABB boundingBoxList[];
};
layout(set = 3, binding = 2) uniform FrustumPlanes {
    vec4 planes[6];  // View Frustum의 6개 평면
};
layout(set = 3, binding = 3) buffer fLODListSSBO {
    float fLODList[];
};

layout(set = 4, binding = 0) uniform texture2D u_DepthMapTextureLOD;

void main() {
    uint idx = gl_GlobalInvocationID.x;

    if(drawIndexedCommands[idx].instanceCount == 0) return;

    vec2 screenMin = vec2(1.0, 1.0);
    vec2 screenMax = vec2(0.0, 0.0);
    float depthMin = 1.0;
    bool isVisible = false;
    float fLOD = 3.0;

    // AABB의 최소 및 최대 좌표
    vec3 bmin = boundingBoxList[idx].minPos.xyz;
    vec3 bmax = boundingBoxList[idx].maxPos.xyz;

    // AABB의 8개 코너 계산
    vec3 corners[8] = {
        vec3(bmin.x, bmin.y, bmin.z),
        vec3(bmin.x, bmin.y, bmax.z),
        vec3(bmin.x, bmax.y, bmin.z),
        vec3(bmin.x, bmax.y, bmax.z),
        vec3(bmax.x, bmin.y, bmin.z),
        vec3(bmax.x, bmin.y, bmax.z),
        vec3(bmax.x, bmax.y, bmin.z),
        vec3(bmax.x, bmax.y, bmax.z)
    };

    // AABB의 모든 코너 검사
    for (uint i = 0; i < 8; ++i) {
        vec4 clipPos = u_Camera.projection * u_Camera.view * ssbo_Model.transform[idx].currentModel * vec4(corners[i], 1.0);
        vec3 ndcPos = clipPos.xyz / clipPos.w;

        // NDC -> 화면 좌표 (0 ~ 1)
        vec2 screenPos = ndcPos.xy * 0.5 + 0.5;
        screenMin = min(screenMin, screenPos);
        screenMax = max(screenMax, screenPos);
        depthMin = min(depthMin, ndcPos.z);

        // LOD 계산
        ivec2 texSize = textureSize(u_DepthMapTextureLOD, 0);
        vec2 screenSize = vec2(texSize) * (screenMax - screenMin);
        float maxScreenSize = max(screenSize.x, screenSize.y);
        fLOD = clamp(floor(log2(maxScreenSize)), 0.0, 3.0);

//        // Hi-Z 맵의 중심 샘플링
//        vec2 samplePos = (screenMin + screenMax) * 0.5;
//        float hizDepth = textureLod(sampler2D(u_DepthMapTextureLOD, pointClampSS), samplePos, fLOD).r;
//
//        // 깊이 비교
//        if (ndcPos.z <= hizDepth + 0.0001) {
//            isVisible = true;
//            break; // 하나라도 보이면 더 이상 검사할 필요 없음
//        }

        // ---- 다중 샘플링 방식을 적용 ----
        // 예) 4개의 샘플(화면 bounding box의 4분점 + 중앙 등)
        // 4분점 + 중앙
        const uint SAMPLE_COUNT = 9;
        vec2 sampleOffsets[SAMPLE_COUNT] = {
            vec2( 0.0,  0.0),  // center
            vec2(-0.5, -0.5),  // bottom-left
            vec2(-0.5,  0.5),  // top-left
            vec2( 0.5, -0.5),  // bottom-right
            vec2( 0.5,  0.5),  // top-right
            vec2( 0.0, -1.0),  // bottom-center
            vec2( 0.0,  1.0),  // top-center
            vec2(-1.0,  0.0),  // left-center
            vec2( 1.0,  0.0)   // right-center
        };

        // "모든 샘플"이 occluded인지 판단하기 위해, 우선 occludedCount=0
        // 모든 샘플이 가려진다면 occludedCount == SAMPLE_COUNT
        // -> Cull
        // 하나라도 보이면 -> Draw
        uint occludedCount = 0;

        // 중심(혹은 bounding box 중점)을 기준으로 -/+ 오프셋
        vec2 boxCenter = 0.5 * (screenMin + screenMax);
        vec2 halfSize  = 0.5 * (screenMax - screenMin);

        for (uint s = 0; s < SAMPLE_COUNT; s++) {
            // 샘플 위치 구하기
            vec2 offset   = sampleOffsets[s];
            vec2 testPos  = boxCenter + offset * halfSize;
            testPos       = clamp(testPos, vec2(0.0), vec2(1.0));  // 화면 밖 방지

            // Hi-Z 샘플
            float hizDepth = textureLod(sampler2D(u_DepthMapTextureLOD, pointClampSS), testPos, fLOD).r;

            // 비교
            // depthMin(가장 앞 코너의 ndc.z) vs hizDepth
            // "샘플 위치에서 Hi-Z보다 앞에 있다면 -> 보인다"
            if (depthMin <= hizDepth + 0.05) {
                // 보이는 샘플 하나라도 발견 -> Draw
                // => break out
                break;
            }
            else {
                occludedCount++;
            }
        }

        isVisible = (occludedCount < SAMPLE_COUNT); // 하나라도 보이면 isVisible=true
    }



    // for debugging
    if(u_ShaderSetting.isDebugging > 0) fLODList[idx] = fLOD;

    drawIndexedCommands[idx].instanceCount = isVisible ? 1 : 0;
}
